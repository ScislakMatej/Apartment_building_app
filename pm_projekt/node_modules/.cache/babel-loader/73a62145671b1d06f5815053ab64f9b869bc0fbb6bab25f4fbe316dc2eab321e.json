{"ast":null,"code":"var _jsxFileName = \"/Users/matejscislak/Desktop/4roc_ZS/PM/project/pm_projekt/ProjektManazment/pm_projekt/src/GraphBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Scatter } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport * as XLSX from \"xlsx\"; // Načítanie knižnice pre prácu so súbormi Excel\nimport { BlobServiceClient } from \"@azure/storage-blob\"; // Import Azure Blob Storage SDK\n\n// Registrácia potrebných komponentov pre Chart.js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend);\nconst GraphBox = () => {\n  _s();\n  var _chartData$datasets$;\n  const [chartData, setChartData] = useState({});\n  const [loading, setLoading] = useState(true); // Stav načítania súboru\n\n  // Azure Blob Storage konfigurácia\n  const containerName = \"pmprojectstorage\"; // Názov kontajnera\n  const blobName = \"expenses-graph.xlsx\"; // Názov súboru na Azure Storage\n  const connectionString = \"DefaultEndpointsProtocol=https;AccountName=pmprojectstorage;AccountKey=H/KdyRAkk+euJZTLJY7/1mgXVeFWp/lk3ZgQQvYJkm/NaqmucdmsKX0Rn6bBzAv4y9ShV6f9o3eO+AStWU1ArA==;EndpointSuffix=core.windows.net\"; // Azure Storage connection string\n\n  useEffect(() => {\n    const fetchDataFromAzure = async () => {\n      try {\n        setLoading(true);\n\n        // Vytvorte BlobServiceClient s connection string\n        const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n        const containerClient = blobServiceClient.getContainerClient(containerName);\n        const blobClient = containerClient.getBlobClient(blobName);\n\n        // Načítajte blob\n        const downloadBlockBlobResponse = await blobClient.download(0);\n        const blobData = await streamToText(downloadBlockBlobResponse.readableStreamBody);\n\n        // Spracovanie Excel súboru\n        const workbook = XLSX.read(blobData, {\n          type: \"binary\"\n        });\n        const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        // Spracovanie dát: extrahovanie mesiacov a stavov na účte\n        const months = jsonData.slice(1, 13).map(row => row[\"Mesiac\"]);\n        const accountBalance = jsonData.slice(1, 13).map(row => row[\"Stav na ucte\"]);\n\n        // Nastavenie dát pre bodový graf\n        const chartData = {\n          datasets: [{\n            label: 'Stav na účte',\n            data: months.map((month, index) => ({\n              x: month,\n              y: accountBalance[index]\n            })),\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        };\n        setChartData(chartData); // Nastavenie dát do stavu\n      } catch (error) {\n        console.error(\"Chyba pri načítavaní súboru z Azure:\", error);\n      } finally {\n        setLoading(false); // Nastavíme loading na false, keď sa načítavanie dokončí\n      }\n    };\n    fetchDataFromAzure(); // Načítanie dát pri prvom renderovaní komponentu\n  }, []);\n\n  // Pomocná funkcia na prevod streamu na text\n  const streamToText = readableStream => {\n    return new Promise((resolve, reject) => {\n      const reader = readableStream.getReader();\n      let decoder = new TextDecoder();\n      let data = \"\";\n      reader.read().then(function processText({\n        done,\n        value\n      }) {\n        if (done) {\n          resolve(data);\n          return;\n        }\n        data += decoder.decode(value, {\n          stream: true\n        });\n        reader.read().then(processText);\n      }).catch(reject);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Graf: Stav \\xFA\\u010Dtu pod\\u013Ea mesiaca\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Na\\u010D\\xEDtavam d\\xE1ta...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) // Zobraziť text počas načítavania dát\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: chartData.datasets && /*#__PURE__*/_jsxDEV(Scatter, {\n        data: chartData // Predanie dát do grafu\n        ,\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              type: 'category',\n              // Nastavenie typu osi X ako kategóriu\n              labels: (_chartData$datasets$ = chartData.datasets[0]) === null || _chartData$datasets$ === void 0 ? void 0 : _chartData$datasets$.data.map(dataPoint => dataPoint.x),\n              // Použijeme hodnoty mesiacov ako štítky X-ovej osi\n              title: {\n                display: true,\n                text: 'Mesiac' // Názov X-ovej osi\n              }\n            },\n            y: {\n              min: 0,\n              // Min hodnota Y-ovej osi (začína od 0)\n              max: 2000,\n              // Max hodnota Y-ovej osi\n              title: {\n                display: true,\n                text: 'Stav na účte' // Názov Y-ovej osi\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top' // Pozícia legendy\n            },\n            title: {\n              display: true,\n              text: 'Mesiac vs Stav na účte' // Titulok grafu\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphBox, \"brzxmrYfkhx/oScAUmuHUa40fUE=\");\n_c = GraphBox;\nexport default GraphBox;\nvar _c;\n$RefreshReg$(_c, \"GraphBox\");","map":{"version":3,"names":["React","useState","useEffect","Scatter","Chart","ChartJS","CategoryScale","LinearScale","PointElement","Title","Tooltip","Legend","XLSX","BlobServiceClient","jsxDEV","_jsxDEV","Fragment","_Fragment","register","GraphBox","_s","_chartData$datasets$","chartData","setChartData","loading","setLoading","containerName","blobName","connectionString","fetchDataFromAzure","blobServiceClient","fromConnectionString","containerClient","getContainerClient","blobClient","getBlobClient","downloadBlockBlobResponse","download","blobData","streamToText","readableStreamBody","workbook","read","type","worksheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","months","slice","map","row","accountBalance","datasets","label","data","month","index","x","y","backgroundColor","borderColor","borderWidth","error","console","readableStream","Promise","resolve","reject","reader","getReader","decoder","TextDecoder","then","processText","done","value","decode","stream","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","scales","labels","dataPoint","title","display","text","min","max","plugins","legend","position","_c","$RefreshReg$"],"sources":["/Users/matejscislak/Desktop/4roc_ZS/PM/project/pm_projekt/ProjektManazment/pm_projekt/src/GraphBox.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Scatter } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport * as XLSX from \"xlsx\";  // Načítanie knižnice pre prácu so súbormi Excel\nimport { BlobServiceClient } from \"@azure/storage-blob\";  // Import Azure Blob Storage SDK\n\n// Registrácia potrebných komponentov pre Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst GraphBox = () => {\n  const [chartData, setChartData] = useState({});\n  const [loading, setLoading] = useState(true); // Stav načítania súboru\n\n  // Azure Blob Storage konfigurácia\n  const containerName = \"pmprojectstorage\"; // Názov kontajnera\n  const blobName = \"expenses-graph.xlsx\"; // Názov súboru na Azure Storage\n  const connectionString = \"DefaultEndpointsProtocol=https;AccountName=pmprojectstorage;AccountKey=H/KdyRAkk+euJZTLJY7/1mgXVeFWp/lk3ZgQQvYJkm/NaqmucdmsKX0Rn6bBzAv4y9ShV6f9o3eO+AStWU1ArA==;EndpointSuffix=core.windows.net\"; // Azure Storage connection string\n\n  useEffect(() => {\n    const fetchDataFromAzure = async () => {\n      try {\n        setLoading(true);\n\n        // Vytvorte BlobServiceClient s connection string\n        const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n        const containerClient = blobServiceClient.getContainerClient(containerName);\n        const blobClient = containerClient.getBlobClient(blobName);\n\n        // Načítajte blob\n        const downloadBlockBlobResponse = await blobClient.download(0);\n        const blobData = await streamToText(downloadBlockBlobResponse.readableStreamBody);\n\n        // Spracovanie Excel súboru\n        const workbook = XLSX.read(blobData, { type: \"binary\" });\n        const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        // Spracovanie dát: extrahovanie mesiacov a stavov na účte\n        const months = jsonData.slice(1, 13).map(row => row[\"Mesiac\"]);\n        const accountBalance = jsonData.slice(1, 13).map(row => row[\"Stav na ucte\"]);\n\n        // Nastavenie dát pre bodový graf\n        const chartData = {\n          datasets: [\n            {\n              label: 'Stav na účte',\n              data: months.map((month, index) => ({\n                x: month,\n                y: accountBalance[index],\n              })),\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1,\n            }\n          ],\n        };\n\n        setChartData(chartData);  // Nastavenie dát do stavu\n      } catch (error) {\n        console.error(\"Chyba pri načítavaní súboru z Azure:\", error);\n      } finally {\n        setLoading(false); // Nastavíme loading na false, keď sa načítavanie dokončí\n      }\n    };\n\n    fetchDataFromAzure(); // Načítanie dát pri prvom renderovaní komponentu\n  }, []);\n\n  // Pomocná funkcia na prevod streamu na text\n  const streamToText = (readableStream) => {\n    return new Promise((resolve, reject) => {\n      const reader = readableStream.getReader();\n      let decoder = new TextDecoder();\n      let data = \"\";\n\n      reader.read().then(function processText({ done, value }) {\n        if (done) {\n          resolve(data);\n          return;\n        }\n        data += decoder.decode(value, { stream: true });\n        reader.read().then(processText);\n      }).catch(reject);\n    });\n  };\n\n  return (\n    <div className=\"graph-box\">\n      <h3>Graf: Stav účtu podľa mesiaca</h3>\n\n      {loading ? (\n        <p>Načítavam dáta...</p> // Zobraziť text počas načítavania dát\n      ) : (\n        <>\n          {/* Scatter graf */}\n          {chartData.datasets && (\n            <Scatter\n              data={chartData}  // Predanie dát do grafu\n              options={{\n                responsive: true,\n                scales: {\n                  x: {\n                    type: 'category',  // Nastavenie typu osi X ako kategóriu\n                    labels: chartData.datasets[0]?.data.map((dataPoint) => dataPoint.x), // Použijeme hodnoty mesiacov ako štítky X-ovej osi\n                    title: {\n                      display: true,\n                      text: 'Mesiac',  // Názov X-ovej osi\n                    },\n                  },\n                  y: {\n                    min: 0,  // Min hodnota Y-ovej osi (začína od 0)\n                    max: 2000,  // Max hodnota Y-ovej osi\n                    title: {\n                      display: true,\n                      text: 'Stav na účte',  // Názov Y-ovej osi\n                    },\n                  },\n                },\n                plugins: {\n                  legend: {\n                    position: 'top',  // Pozícia legendy\n                  },\n                  title: {\n                    display: true,\n                    text: 'Mesiac vs Stav na účte',  // Titulok grafu\n                  },\n                },\n              }}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default GraphBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}