{"ast":null,"code":"var _jsxFileName = \"/Users/matejscislak/Desktop/4roc_ZS/PM/apka/ProjektManazment/pm_projekt/src/GraphBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Scatter } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport * as XLSX from \"xlsx\"; // Načítanie knižnice pre prácu so súbormi Excel\n\n// Registrácia potrebných komponentov pre Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend);\nconst GraphBox = () => {\n  _s();\n  var _chartData$datasets$;\n  const [chartData, setChartData] = useState({});\n\n  // Funkcia na načítanie a spracovanie Excel súboru z cesty\n  const fetchExcelFile = async () => {\n    try {\n      // Načítanie súboru z cesty\n      const response = await fetch(\"/Users/matejscislak/Desktop/4roc_ZS/PM/apka/ProjektManazment/pm_projekt/src/graf.xlsx\"); // Relatívna cesta k súboru\n      const blob = await response.blob();\n\n      // Čítanie Excel súboru\n      const reader = new FileReader();\n      reader.onload = event => {\n        const data = event.target.result;\n        const workbook = XLSX.read(data, {\n          type: \"binary\"\n        });\n\n        // Predpokladáme, že údaje sú v prvom hárku\n        const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        // Spracovanie dát: extrahovanie mesiacov a stavov na účte\n        const months = jsonData.slice(1, 13).map(row => row[\"Mesiac\"]); // Vyberieme hodnoty od A2 po A13\n        const accountBalance = jsonData.slice(1, 13).map(row => row[\"Stav na ucte\"]); // Získať hodnoty zo stĺpca \"Stav na ucte\"\n\n        // Nastavenie dát pre bodový graf\n        const chartData = {\n          datasets: [{\n            label: 'Stav na účte',\n            data: months.map((month, index) => ({\n              x: month,\n              y: accountBalance[index]\n            })),\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        };\n        setChartData(chartData); // Nastavenie dát do stavu\n      };\n      reader.readAsBinaryString(blob); // Čítanie súboru ako binárny\n    } catch (error) {\n      console.error(\"Chyba pri načítaní Excel súboru:\", error);\n    }\n  };\n\n  // Načítanie Excel súboru pri načítaní komponentu\n  useEffect(() => {\n    fetchExcelFile();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Graf: Stav \\xFA\\u010Dtu pod\\u013Ea mesiaca\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), chartData.datasets && /*#__PURE__*/_jsxDEV(Scatter, {\n      data: chartData,\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            type: 'category',\n            labels: (_chartData$datasets$ = chartData.datasets[0]) === null || _chartData$datasets$ === void 0 ? void 0 : _chartData$datasets$.data.map(dataPoint => dataPoint.x),\n            title: {\n              display: true,\n              text: 'Mesiac'\n            }\n          },\n          y: {\n            min: 0,\n            max: 2000,\n            title: {\n              display: true,\n              text: 'Stav na účte'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: 'Mesiac vs Stav na účte'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphBox, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = GraphBox;\nexport default GraphBox;\nvar _c;\n$RefreshReg$(_c, \"GraphBox\");","map":{"version":3,"names":["React","useState","useEffect","Scatter","Chart","ChartJS","CategoryScale","LinearScale","PointElement","Title","Tooltip","Legend","XLSX","jsxDEV","_jsxDEV","register","GraphBox","_s","_chartData$datasets$","chartData","setChartData","fetchExcelFile","response","fetch","blob","reader","FileReader","onload","event","data","target","result","workbook","read","type","worksheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","months","slice","map","row","accountBalance","datasets","label","month","index","x","y","backgroundColor","borderColor","borderWidth","readAsBinaryString","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","scales","labels","dataPoint","title","display","text","min","max","plugins","legend","position","_c","$RefreshReg$"],"sources":["/Users/matejscislak/Desktop/4roc_ZS/PM/apka/ProjektManazment/pm_projekt/src/GraphBox.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Scatter } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport * as XLSX from \"xlsx\";  // Načítanie knižnice pre prácu so súbormi Excel\n\n// Registrácia potrebných komponentov pre Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst GraphBox = () => {\n  const [chartData, setChartData] = useState({});\n\n  // Funkcia na načítanie a spracovanie Excel súboru z cesty\n  const fetchExcelFile = async () => {\n    try {\n      // Načítanie súboru z cesty\n      const response = await fetch(\"/Users/matejscislak/Desktop/4roc_ZS/PM/apka/ProjektManazment/pm_projekt/src/graf.xlsx\"); // Relatívna cesta k súboru\n      const blob = await response.blob();\n\n      // Čítanie Excel súboru\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const data = event.target.result;\n        const workbook = XLSX.read(data, { type: \"binary\" });\n\n        // Predpokladáme, že údaje sú v prvom hárku\n        const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        // Spracovanie dát: extrahovanie mesiacov a stavov na účte\n        const months = jsonData.slice(1, 13).map(row => row[\"Mesiac\"]); // Vyberieme hodnoty od A2 po A13\n        const accountBalance = jsonData.slice(1, 13).map(row => row[\"Stav na ucte\"]); // Získať hodnoty zo stĺpca \"Stav na ucte\"\n\n        // Nastavenie dát pre bodový graf\n        const chartData = {\n          datasets: [\n            {\n              label: 'Stav na účte',\n              data: months.map((month, index) => ({\n                x: month,\n                y: accountBalance[index],\n              })),\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1,\n            }\n          ],\n        };\n\n        setChartData(chartData); // Nastavenie dát do stavu\n      };\n\n      reader.readAsBinaryString(blob); // Čítanie súboru ako binárny\n    } catch (error) {\n      console.error(\"Chyba pri načítaní Excel súboru:\", error);\n    }\n  };\n\n  // Načítanie Excel súboru pri načítaní komponentu\n  useEffect(() => {\n    fetchExcelFile();\n  }, []);\n\n  return (\n    <div className=\"graph-box\">\n      <h3>Graf: Stav účtu podľa mesiaca</h3>\n\n      {/* Scatter graf */}\n      {chartData.datasets && (\n        <Scatter\n          data={chartData}\n          options={{\n            responsive: true,\n            scales: {\n              x: {\n                type: 'category',\n                labels: chartData.datasets[0]?.data.map((dataPoint) => dataPoint.x),\n                title: {\n                  display: true,\n                  text: 'Mesiac',\n                },\n              },\n              y: {\n                min: 0,\n                max: 2000,\n                title: {\n                  display: true,\n                  text: 'Stav na účte',\n                },\n              },\n            },\n            plugins: {\n              legend: {\n                position: 'top',\n              },\n              title: {\n                display: true,\n                text: 'Mesiac vs Stav na účte',\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GraphBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}