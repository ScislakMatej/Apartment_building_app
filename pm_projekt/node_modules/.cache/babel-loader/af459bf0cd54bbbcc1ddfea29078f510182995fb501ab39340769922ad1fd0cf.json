{"ast":null,"code":"var _jsxFileName = \"/Users/matejscislak/Desktop/4roc_ZS/PM/project/pm_projekt/ProjektManazment/pm_projekt/src/GraphBox.js\",\n  _s = $RefreshSig$();\n// GraphBox.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2'; // Používame Line graf z react-chartjs-2\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { BlobServiceClient } from '@azure/storage-blob';\nimport xlsx from 'xlsx';\n\n// Registrujeme potrebné moduly pre Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst GraphBox = () => {\n  _s();\n  const [chartData, setChartData] = useState(null); // Stav pre uchovávanie dát grafu\n\n  useEffect(() => {\n    // Funkcia na získanie dát zo súboru Excel v Azure Blob Storage\n    const fetchExcelData = async () => {\n      const connectionString = 'DefaultEndpointsProtocol=https;AccountName=pmprojectstorage;AccountKey=H/KdyRAkk+euJZTLJY7/1mgXVeFWp/lk3ZgQQvYJkm/NaqmucdmsKX0Rn6bBzAv4y9ShV6f9o3eO+AStWU1ArA==;EndpointSuffix=core.windows.net';\n      const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n      const containerClient = blobServiceClient.getContainerClient('expenses-graph');\n      const blobClient = containerClient.getBlobClient('graf.xlsx');\n      try {\n        const downloadBlockBlobResponse = await blobClient.download(0);\n        const buffer = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n        const workbook = xlsx.read(buffer, {\n          type: 'buffer'\n        });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n\n        // Predpokladajme, že máte dátumové údaje v stĺpci A a hodnoty v stĺpci B\n        const data = xlsx.utils.sheet_to_json(worksheet);\n        const dates = data.map(row => row.Date); // Predpokladáme, že v Exceli máte stĺpec \"Date\"\n        const values = data.map(row => row.Value); // A stĺpec \"Value\"\n\n        // Príprava dát pre graf\n        setChartData({\n          labels: dates,\n          // Dátumy ako X-ová os\n          datasets: [{\n            label: 'Hodnoty',\n            // Popis grafu\n            data: values,\n            // Hodnoty na Y-ovej osi\n            borderColor: 'rgba(75,192,192,1)',\n            backgroundColor: 'rgba(75,192,192,0.2)',\n            fill: true\n          }]\n        });\n      } catch (error) {\n        console.error('Chyba pri načítaní dát zo súboru Excel:', error);\n      }\n    };\n    fetchExcelData();\n  }, []);\n\n  // Funkcia na prevod streamu na buffer\n  const streamToBuffer = stream => {\n    return new Promise((resolve, reject) => {\n      const chunks = [];\n      stream.on(\"data\", chunk => chunks.push(chunk));\n      stream.on(\"end\", () => resolve(Buffer.concat(chunks)));\n      stream.on(\"error\", reject);\n    });\n  };\n  if (!chartData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Na\\u010D\\xEDtavam graf...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this); // Ak dáta ešte neboli načítané\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Graf z Excel s\\xFAboru\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphBox, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = GraphBox;\nexport default GraphBox;\nvar _c;\n$RefreshReg$(_c, \"GraphBox\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","BlobServiceClient","xlsx","jsxDEV","_jsxDEV","register","GraphBox","_s","chartData","setChartData","fetchExcelData","connectionString","blobServiceClient","fromConnectionString","containerClient","getContainerClient","blobClient","getBlobClient","downloadBlockBlobResponse","download","buffer","streamToBuffer","readableStreamBody","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","data","utils","sheet_to_json","dates","map","row","Date","values","Value","labels","datasets","label","borderColor","backgroundColor","fill","error","console","stream","Promise","resolve","reject","chunks","on","chunk","push","Buffer","concat","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/matejscislak/Desktop/4roc_ZS/PM/project/pm_projekt/ProjektManazment/pm_projekt/src/GraphBox.js"],"sourcesContent":["// GraphBox.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';  // Používame Line graf z react-chartjs-2\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { BlobServiceClient } from '@azure/storage-blob';\nimport xlsx from 'xlsx';\n\n// Registrujeme potrebné moduly pre Chart.js\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst GraphBox = () => {\n  const [chartData, setChartData] = useState(null); // Stav pre uchovávanie dát grafu\n\n  useEffect(() => {\n    // Funkcia na získanie dát zo súboru Excel v Azure Blob Storage\n    const fetchExcelData = async () => {\n      const connectionString = 'DefaultEndpointsProtocol=https;AccountName=pmprojectstorage;AccountKey=H/KdyRAkk+euJZTLJY7/1mgXVeFWp/lk3ZgQQvYJkm/NaqmucdmsKX0Rn6bBzAv4y9ShV6f9o3eO+AStWU1ArA==;EndpointSuffix=core.windows.net';\n      const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n      const containerClient = blobServiceClient.getContainerClient('expenses-graph');\n      const blobClient = containerClient.getBlobClient('graf.xlsx');\n\n      try {\n        const downloadBlockBlobResponse = await blobClient.download(0);\n        const buffer = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n        const workbook = xlsx.read(buffer, { type: 'buffer' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n\n        // Predpokladajme, že máte dátumové údaje v stĺpci A a hodnoty v stĺpci B\n        const data = xlsx.utils.sheet_to_json(worksheet);\n        const dates = data.map(row => row.Date); // Predpokladáme, že v Exceli máte stĺpec \"Date\"\n        const values = data.map(row => row.Value); // A stĺpec \"Value\"\n\n        // Príprava dát pre graf\n        setChartData({\n          labels: dates, // Dátumy ako X-ová os\n          datasets: [\n            {\n              label: 'Hodnoty', // Popis grafu\n              data: values, // Hodnoty na Y-ovej osi\n              borderColor: 'rgba(75,192,192,1)',\n              backgroundColor: 'rgba(75,192,192,0.2)',\n              fill: true,\n            },\n          ],\n        });\n      } catch (error) {\n        console.error('Chyba pri načítaní dát zo súboru Excel:', error);\n      }\n    };\n\n    fetchExcelData();\n  }, []);\n\n  // Funkcia na prevod streamu na buffer\n  const streamToBuffer = (stream) => {\n    return new Promise((resolve, reject) => {\n      const chunks = [];\n      stream.on(\"data\", chunk => chunks.push(chunk));\n      stream.on(\"end\", () => resolve(Buffer.concat(chunks)));\n      stream.on(\"error\", reject);\n    });\n  };\n\n  if (!chartData) {\n    return <div>Načítavam graf...</div>;  // Ak dáta ešte neboli načítané\n  }\n\n  return (\n    <div className=\"graph-box\">\n      <h3>Graf z Excel súboru</h3>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default GraphBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}